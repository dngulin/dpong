// This file is auto-generated by the PlainBuffers compiler
// Generated at 2021-03-15T21:50:17.0061860+03:00

// ReSharper disable All

using System;
using System.Runtime.InteropServices;
using Unity.Collections.LowLevel.Unsafe;
using DPong.Level.State;
using FxNet.Random;
using UnityEngine;

#pragma warning disable 649

namespace DPong.Level.View {
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct HitPointsViewState {
        public const int SizeOf = 8;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public int Left;
        [FieldOffset(4)] public int Right;

        public void WriteDefault() {
            Left = 0;
            Right = 0;
        }

        public static bool operator ==(in HitPointsViewState l, in HitPointsViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in HitPointsViewState l, in HitPointsViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is HitPointsViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class HitPointsStateViewExtensions {
        public static HitPointsViewState ToViewState(this in HitPointsState value) {
            var result = new HitPointsViewState();
            result.Left = value.Left;
            result.Right = value.Right;
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct BallViewState {
        public const int SizeOf = 20;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public float FreezeCooldown;
        [FieldOffset(4)] public Vector2 Speed;
        [FieldOffset(12)] public Vector2 Position;

        public void WriteDefault() {
            FreezeCooldown = 0;
            Speed = Vector2.zero;
            Position = Vector2.zero;
        }

        public static bool operator ==(in BallViewState l, in BallViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in BallViewState l, in BallViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is BallViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class BallStateViewExtensions {
        public static BallViewState ToViewState(this in BallState value) {
            var result = new BallViewState();
            result.FreezeCooldown = value.FreezeCooldown.ToFloat();
            result.Speed = value.Speed.ToVector2();
            result.Position = value.Position.ToVector2();
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct BlockerViewState {
        public const int SizeOf = 8;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public Vector2 Position;

        public void WriteDefault() {
            Position = Vector2.zero;
        }

        public static bool operator ==(in BlockerViewState l, in BlockerViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in BlockerViewState l, in BlockerViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is BlockerViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class BlockerStateViewExtensions {
        public static BlockerViewState ToViewState(this in BlockerState value) {
            var result = new BlockerViewState();
            result.Position = value.Position.ToVector2();
            return result;
        }
    }

    public unsafe struct BlockerViewState2 {
        public const int SizeOf = 16;
        public const int Length = 2;

        private fixed byte _buffer[SizeOf];

        public void WriteDefault() {
            for (var i = 0; i < Length; i++) {
                this[i].WriteDefault();
            }
        }

        public ref BlockerViewState this[int index] {
            get {
                if (index < 0 || sizeof(BlockerViewState) * index >= SizeOf) throw new IndexOutOfRangeException();
                return ref At(index);
            }
        }

        private ref BlockerViewState At(int index) {
            fixed (byte* __ptr = _buffer) {
                return ref *((BlockerViewState*)__ptr + index);
            }
        }

        public _EnumeratorOfBlockerViewState2 GetEnumerator() => new _EnumeratorOfBlockerViewState2(ref this);

        public unsafe ref struct _EnumeratorOfBlockerViewState2 {
            private readonly BlockerViewState2* _arrayPtr;
            private int _index;

            public _EnumeratorOfBlockerViewState2(ref BlockerViewState2 array) {
                fixed (BlockerViewState2* arrayPtr = &array) _arrayPtr = arrayPtr;
                _index = -1;
            }

            public bool MoveNext() => ++_index < Length;
            public ref BlockerViewState Current => ref (*_arrayPtr).At(_index);

            public void Reset() => _index = -1;
            public void Dispose() {}
        }

        public static bool operator ==(in BlockerViewState2 l, in BlockerViewState2 r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in BlockerViewState2 l, in BlockerViewState2 r) => !(l == r);

        public override bool Equals(object obj) => obj is BlockerViewState2 casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class BlockerState2ViewExtensions {
        public static BlockerViewState2 ToViewState(this in BlockerState2 value) {
            var result = new BlockerViewState2();
            for (var i = 0; i < BlockerViewState2.Length; i++) {
                result[i] = value[i].ToViewState();
            }
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct LevelViewState {
        public const int SizeOf = 80;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public FxRandomState Random;
        [FieldOffset(32)] public float Pace;
        [FieldOffset(36)] public HitPointsViewState HitPoints;
        [FieldOffset(44)] public BallViewState Ball;
        [FieldOffset(64)] public BlockerViewState2 Blockers;

        public void WriteDefault() {
            Random = default;
            Pace = 0;
            HitPoints.WriteDefault();
            Ball.WriteDefault();
            Blockers.WriteDefault();
        }

        public static bool operator ==(in LevelViewState l, in LevelViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in LevelViewState l, in LevelViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is LevelViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class LevelStateViewExtensions {
        public static LevelViewState ToViewState(this in LevelState value) {
            var result = new LevelViewState();
            result.Random = value.Random;
            result.Pace = value.Pace.ToFloat();
            result.HitPoints = value.HitPoints.ToViewState();
            result.Ball = value.Ball.ToViewState();
            result.Blockers = value.Blockers.ToViewState();
            return result;
        }
    }
}
