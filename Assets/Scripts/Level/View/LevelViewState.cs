// This file is auto-generated by the PlainBuffers compiler
// Generated at 2021-08-19T20:33:38.4466880+02:00

// ReSharper disable All

using System;
using System.Runtime.InteropServices;
using Unity.Collections.LowLevel.Unsafe;

using DPong.Level.State;
using FxNet.Random;
using UnityEngine;

#pragma warning disable 649

namespace DPong.Level.View {
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct ScoresViewState {
        public const int SizeOf = 8;
        public const int AlignmentOf = 4;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public int Left;
        [FieldOffset(4)] public int Right;

        public void WriteDefault() {
            Left = 0;
            Right = 0;
        }

        public static bool operator ==(in ScoresViewState l, in ScoresViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in ScoresViewState l, in ScoresViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is ScoresViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class ScoresStateViewExtensions {
        public static ScoresViewState ToViewState(this in ScoresState value) {
            var result = new ScoresViewState();
            result.Left = value.Left;
            result.Right = value.Right;
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct BallViewState {
        public const int SizeOf = 20;
        public const int AlignmentOf = 4;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public float FreezeCooldown;
        [FieldOffset(4)] public Vector2 Speed;
        [FieldOffset(12)] public Vector2 Position;

        public void WriteDefault() {
            FreezeCooldown = 0;
            Speed = Vector2.zero;
            Position = Vector2.zero;
        }

        public static bool operator ==(in BallViewState l, in BallViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in BallViewState l, in BallViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is BallViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class BallStateViewExtensions {
        public static BallViewState ToViewState(this in BallState value) {
            var result = new BallViewState();
            result.FreezeCooldown = value.FreezeCooldown.ToFloat();
            result.Speed = value.Speed.ToVector2();
            result.Position = value.Position.ToVector2();
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct PaddleViewState {
        public const int SizeOf = 8;
        public const int AlignmentOf = 4;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public Vector2 Position;

        public void WriteDefault() {
            Position = Vector2.zero;
        }

        public static bool operator ==(in PaddleViewState l, in PaddleViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in PaddleViewState l, in PaddleViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is PaddleViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class PaddleStateViewExtensions {
        public static PaddleViewState ToViewState(this in PaddleState value) {
            var result = new PaddleViewState();
            result.Position = value.Position.ToVector2();
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct PaddlesViewState {
        public const int SizeOf = 16;
        public const int AlignmentOf = 4;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public PaddleViewState Left;
        [FieldOffset(8)] public PaddleViewState Right;

        public void WriteDefault() {
            Left.WriteDefault();
            Right.WriteDefault();
        }

        public static bool operator ==(in PaddlesViewState l, in PaddlesViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in PaddlesViewState l, in PaddlesViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is PaddlesViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class PaddlesStateViewExtensions {
        public static PaddlesViewState ToViewState(this in PaddlesState value) {
            var result = new PaddlesViewState();
            result.Left = value.Left.ToViewState();
            result.Right = value.Right.ToViewState();
            return result;
        }
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct LevelViewState {
        public const int SizeOf = 80;
        public const int AlignmentOf = 8;

        [FieldOffset(0)] private fixed byte _buffer[SizeOf];

        [FieldOffset(0)] public FxRandomState Random;
        [FieldOffset(32)] public float Pace;
        [FieldOffset(36)] public ScoresViewState Scores;
        [FieldOffset(44)] public BallViewState Ball;
        [FieldOffset(64)] public PaddlesViewState Paddles;

        public void WriteDefault() {
            Random = default;
            Pace = 0;
            Scores.WriteDefault();
            Ball.WriteDefault();
            Paddles.WriteDefault();
        }

        public static bool operator ==(in LevelViewState l, in LevelViewState r) {
            fixed (byte* __l = l._buffer, __r = r._buffer) {
                return UnsafeUtility.MemCmp(__l, __r, SizeOf) == 0;
            }
        }
        public static bool operator !=(in LevelViewState l, in LevelViewState r) => !(l == r);

        public override bool Equals(object obj) => obj is LevelViewState casted && this == casted;
        public override int GetHashCode() => throw new NotSupportedException();
    }

    public static class LevelStateViewExtensions {
        public static LevelViewState ToViewState(this in LevelState value) {
            var result = new LevelViewState();
            result.Random = value.Random;
            result.Pace = value.Pace.ToFloat();
            result.Scores = value.Scores.ToViewState();
            result.Ball = value.Ball.ToViewState();
            result.Paddles = value.Paddles.ToViewState();
            return result;
        }
    }
}
